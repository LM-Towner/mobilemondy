swagger: '2.0'

info:
  x-ibm-name: hangouts
  version: 1.0.0
  title: hangouts

schemes:
  - https
host: $(catalog.host)
basePath: /api

consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
 clientIdHeader:
   type: apiKey
   in: header
   name: X-IBM-Client-Id
 clientSecretHeader:
   in: "header"
   name: "X-IBM-Client-Secret"
   type: "apiKey"


security:
 -
   clientIdHeader: []
   clientSecretHeader: []

x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)

paths:
  '/Users/{id}/accessTokens/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Users/{id}/accessTokens':
    get:
      tags:
        - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/accessTokens/count':
    get:
      tags:
        - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
        - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: User.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: User.replaceOrCreate__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
        - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - User
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: User.replaceOrCreate__post_Users_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - User
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: User.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - User
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: User.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'User.replaceById__put_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
        - User
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: User.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - User
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: User.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - User
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'User.replaceById__post_Users_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
        - User
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: User.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/login:
    post:
      tags:
        - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
        - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/verify':
    post:
      tags:
        - User
      summary: "Trigger user's identity verification with configured verifyOptions"
      operationId: User.prototype.verify
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
        - User
      summary: Confirm a user registration with identity verification token.
      operationId: User.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
        - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/change-password:
    post:
      tags:
        - User
      summary: "Change a user's password."
      operationId: User.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset-password:
    post:
      tags:
        - User
      summary: "Reset user's password via a password-reset token."
      operationId: User.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/players/{id}/dates/{fk}':
    get:
      tags:
        - player
      summary: Find a related item by id for dates.
      operationId: player.prototype.__findById__dates
      parameters:
        - name: fk
          in: path
          description: Foreign key for dates
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
            format: date-time
      deprecated: false
    delete:
      tags:
        - player
      summary: Delete a related item by id for dates.
      operationId: player.prototype.__destroyById__dates
      parameters:
        - name: fk
          in: path
          description: Foreign key for dates
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - player
      summary: Update a related item by id for dates.
      operationId: player.prototype.__updateById__dates
      parameters:
        - name: fk
          in: path
          description: Foreign key for dates
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            type: string
            format: date-time
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
            format: date-time
      deprecated: false
  '/players/{id}/recommendations/{fk}':
    get:
      tags:
        - player
      summary: Find a related item by id for recommendations.
      operationId: player.prototype.__findById__recommendations
      parameters:
        - name: fk
          in: path
          description: Foreign key for recommendations
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
    delete:
      tags:
        - player
      summary: Delete a related item by id for recommendations.
      operationId: player.prototype.__destroyById__recommendations
      parameters:
        - name: fk
          in: path
          description: Foreign key for recommendations
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - player
      summary: Update a related item by id for recommendations.
      operationId: player.prototype.__updateById__recommendations
      parameters:
        - name: fk
          in: path
          description: Foreign key for recommendations
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/recommendation'
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
  '/players/{id}/dates':
    get:
      tags:
        - player
      summary: Queries dates of player.
      operationId: player.prototype.__get__dates
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              type: string
              format: date-time
      deprecated: false
    post:
      tags:
        - player
      summary: Creates a new instance in dates of this model.
      operationId: player.prototype.__create__dates
      parameters:
        - name: data
          in: body
          required: false
          schema:
            type: string
            format: date-time
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
            format: date-time
      deprecated: false
    delete:
      tags:
        - player
      summary: Deletes all dates of this model.
      operationId: player.prototype.__delete__dates
      parameters:
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/players/{id}/dates/count':
    get:
      tags:
        - player
      summary: Counts dates of player.
      operationId: player.prototype.__count__dates
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/players/{id}/recommendations':
    get:
      tags:
        - player
      summary: Queries recommendations of player.
      operationId: player.prototype.__get__recommendations
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/recommendation'
      deprecated: false
    post:
      tags:
        - player
      summary: Creates a new instance in recommendations of this model.
      operationId: player.prototype.__create__recommendations
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/recommendation'
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
    delete:
      tags:
        - player
      summary: Deletes all recommendations of this model.
      operationId: player.prototype.__delete__recommendations
      parameters:
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/players/{id}/recommendations/count':
    get:
      tags:
        - player
      summary: Counts recommendations of player.
      operationId: player.prototype.__count__recommendations
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /players:
    post:
      tags:
        - player
      summary: Create a new instance of the model and persist it into the data source.
      operationId: player.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
    patch:
      tags:
        - player
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: player.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
    put:
      tags:
        - player
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: player.replaceOrCreate__put_players
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
    get:
      tags:
        - player
      summary: Find all instances of the model matched by filter from the data source.
      operationId: player.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/player'
      deprecated: false
  /players/replaceOrCreate:
    post:
      tags:
        - player
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: player.replaceOrCreate__post_players_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
  /players/upsertWithWhere:
    post:
      tags:
        - player
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: player.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
  '/players/{id}/exists':
    get:
      tags:
        - player
      summary: Check whether a model instance exists in the data source.
      operationId: 'player.exists__get_players_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/players/{id}':
    head:
      tags:
        - player
      summary: Check whether a model instance exists in the data source.
      operationId: 'player.exists__head_players_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - player
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: player.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
    put:
      tags:
        - player
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'player.replaceById__put_players_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
    delete:
      tags:
        - player
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: player.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - player
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: player.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/player'
        - name: id
          in: path
          description: player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
  '/players/{id}/replace':
    post:
      tags:
        - player
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'player.replaceById__post_players_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
  /players/findOne:
    get:
      tags:
        - player
      summary: Find first instance of the model matched by filter from the data source.
      operationId: player.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
  /players/update:
    post:
      tags:
        - player
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: player.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/player'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /players/count:
    get:
      tags:
        - player
      summary: Count instances of the model matched by where from the data source.
      operationId: player.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/dates/{id}/player':
    get:
      tags:
        - date
      summary: Fetches belongsTo relation player.
      operationId: date.prototype.__get__player
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: date id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
  /dates:
    post:
      tags:
        - date
      summary: Create a new instance of the model and persist it into the data source.
      operationId: date.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            type: string
            format: date-time
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
            format: date-time
      deprecated: false
    patch:
      tags:
        - date
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: date.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            type: string
            format: date-time
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
            format: date-time
      deprecated: false
    put:
      tags:
        - date
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: date.replaceOrCreate__put_dates
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            type: string
            format: date-time
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
            format: date-time
      deprecated: false
    get:
      tags:
        - date
      summary: Find all instances of the model matched by filter from the data source.
      operationId: date.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              type: string
              format: date-time
      deprecated: false
  /dates/replaceOrCreate:
    post:
      tags:
        - date
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: date.replaceOrCreate__post_dates_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            type: string
            format: date-time
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
            format: date-time
      deprecated: false
  /dates/upsertWithWhere:
    post:
      tags:
        - date
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: date.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            type: string
            format: date-time
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
            format: date-time
      deprecated: false
  '/dates/{id}/exists':
    get:
      tags:
        - date
      summary: Check whether a model instance exists in the data source.
      operationId: 'date.exists__get_dates_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/dates/{id}':
    head:
      tags:
        - date
      summary: Check whether a model instance exists in the data source.
      operationId: 'date.exists__head_dates_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - date
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: date.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
            format: date-time
      deprecated: false
    put:
      tags:
        - date
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'date.replaceById__put_dates_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            type: string
            format: date-time
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
            format: date-time
      deprecated: false
    delete:
      tags:
        - date
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: date.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - date
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: date.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            type: string
            format: date-time
        - name: id
          in: path
          description: date id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
            format: date-time
      deprecated: false
  '/dates/{id}/replace':
    post:
      tags:
        - date
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'date.replaceById__post_dates_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            type: string
            format: date-time
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
            format: date-time
      deprecated: false
  /dates/findOne:
    get:
      tags:
        - date
      summary: Find first instance of the model matched by filter from the data source.
      operationId: date.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
            format: date-time
      deprecated: false
  /dates/update:
    post:
      tags:
        - date
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: date.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            type: string
            format: date-time
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /dates/count:
    get:
      tags:
        - date
      summary: Count instances of the model matched by where from the data source.
      operationId: date.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/recommendations/{id}/player':
    get:
      tags:
        - recommendation
      summary: Fetches belongsTo relation player.
      operationId: recommendation.prototype.__get__player
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: recommendation id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
  /recommendations:
    post:
      tags:
        - recommendation
      summary: Create a new instance of the model and persist it into the data source.
      operationId: recommendation.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/recommendation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
    patch:
      tags:
        - recommendation
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: recommendation.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/recommendation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
    put:
      tags:
        - recommendation
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: recommendation.replaceOrCreate__put_recommendations
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/recommendation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
    get:
      tags:
        - recommendation
      summary: Find all instances of the model matched by filter from the data source.
      operationId: recommendation.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/recommendation'
      deprecated: false
  /recommendations/replaceOrCreate:
    post:
      tags:
        - recommendation
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: recommendation.replaceOrCreate__post_recommendations_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/recommendation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
  /recommendations/upsertWithWhere:
    post:
      tags:
        - recommendation
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: recommendation.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/recommendation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
  '/recommendations/{id}/exists':
    get:
      tags:
        - recommendation
      summary: Check whether a model instance exists in the data source.
      operationId: 'recommendation.exists__get_recommendations_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/recommendations/{id}':
    head:
      tags:
        - recommendation
      summary: Check whether a model instance exists in the data source.
      operationId: 'recommendation.exists__head_recommendations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - recommendation
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: recommendation.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
    put:
      tags:
        - recommendation
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'recommendation.replaceById__put_recommendations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/recommendation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
    delete:
      tags:
        - recommendation
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: recommendation.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - recommendation
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: recommendation.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/recommendation'
        - name: id
          in: path
          description: recommendation id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
  '/recommendations/{id}/replace':
    post:
      tags:
        - recommendation
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'recommendation.replaceById__post_recommendations_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/recommendation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
  /recommendations/findOne:
    get:
      tags:
        - recommendation
      summary: Find first instance of the model matched by filter from the data source.
      operationId: recommendation.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
  /recommendations/update:
    post:
      tags:
        - recommendation
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: recommendation.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/recommendation'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /recommendations/count:
    get:
      tags:
        - recommendation
      summary: Count instances of the model matched by where from the data source.
      operationId: recommendation.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/rounds/{id}/recommendations/{fk}':
    get:
      tags:
        - round
      summary: Find a related item by id for recommendations.
      operationId: round.prototype.__findById__recommendations
      parameters:
        - name: fk
          in: path
          description: Foreign key for recommendations
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
    delete:
      tags:
        - round
      summary: Delete a related item by id for recommendations.
      operationId: round.prototype.__destroyById__recommendations
      parameters:
        - name: fk
          in: path
          description: Foreign key for recommendations
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - round
      summary: Update a related item by id for recommendations.
      operationId: round.prototype.__updateById__recommendations
      parameters:
        - name: fk
          in: path
          description: Foreign key for recommendations
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/recommendation'
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
  '/rounds/{id}/players/{fk}':
    get:
      tags:
        - round
      summary: Find a related item by id for players.
      operationId: round.prototype.__findById__players
      parameters:
        - name: fk
          in: path
          description: Foreign key for players
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
    delete:
      tags:
        - round
      summary: Delete a related item by id for players.
      operationId: round.prototype.__destroyById__players
      parameters:
        - name: fk
          in: path
          description: Foreign key for players
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - round
      summary: Update a related item by id for players.
      operationId: round.prototype.__updateById__players
      parameters:
        - name: fk
          in: path
          description: Foreign key for players
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/player'
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
  '/rounds/{id}/players/rel/{fk}':
    put:
      tags:
        - round
      summary: Add a related item by id for players.
      operationId: round.prototype.__link__players
      parameters:
        - name: fk
          in: path
          description: Foreign key for players
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/recommendation'
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
    delete:
      tags:
        - round
      summary: Remove the players relation to an item by id.
      operationId: round.prototype.__unlink__players
      parameters:
        - name: fk
          in: path
          description: Foreign key for players
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - round
      summary: Check the existence of players relation to an item by id.
      operationId: round.prototype.__exists__players
      parameters:
        - name: fk
          in: path
          description: Foreign key for players
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/rounds/{id}/recommendations':
    get:
      tags:
        - round
      summary: Queries recommendations of round.
      operationId: round.prototype.__get__recommendations
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/recommendation'
      deprecated: false
    post:
      tags:
        - round
      summary: Creates a new instance in recommendations of this model.
      operationId: round.prototype.__create__recommendations
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/recommendation'
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/recommendation'
      deprecated: false
    delete:
      tags:
        - round
      summary: Deletes all recommendations of this model.
      operationId: round.prototype.__delete__recommendations
      parameters:
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/rounds/{id}/recommendations/count':
    get:
      tags:
        - round
      summary: Counts recommendations of round.
      operationId: round.prototype.__count__recommendations
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/rounds/{id}/players':
    get:
      tags:
        - round
      summary: Queries players of round.
      operationId: round.prototype.__get__players
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/player'
      deprecated: false
    post:
      tags:
        - round
      summary: Creates a new instance in players of this model.
      operationId: round.prototype.__create__players
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/player'
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/player'
      deprecated: false
    delete:
      tags:
        - round
      summary: Deletes all players of this model.
      operationId: round.prototype.__delete__players
      parameters:
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/rounds/{id}/players/count':
    get:
      tags:
        - round
      summary: Counts players of round.
      operationId: round.prototype.__count__players
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /rounds:
    post:
      tags:
        - round
      summary: Create a new instance of the model and persist it into the data source.
      operationId: round.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/round'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/round'
      deprecated: false
    patch:
      tags:
        - round
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: round.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/round'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/round'
      deprecated: false
    put:
      tags:
        - round
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: round.replaceOrCreate__put_rounds
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/round'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/round'
      deprecated: false
    get:
      tags:
        - round
      summary: Find all instances of the model matched by filter from the data source.
      operationId: round.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/round'
      deprecated: false
  /rounds/replaceOrCreate:
    post:
      tags:
        - round
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: round.replaceOrCreate__post_rounds_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/round'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/round'
      deprecated: false
  /rounds/upsertWithWhere:
    post:
      tags:
        - round
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: round.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/round'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/round'
      deprecated: false
  '/rounds/{id}/exists':
    get:
      tags:
        - round
      summary: Check whether a model instance exists in the data source.
      operationId: 'round.exists__get_rounds_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/rounds/{id}':
    head:
      tags:
        - round
      summary: Check whether a model instance exists in the data source.
      operationId: 'round.exists__head_rounds_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - round
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: round.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/round'
      deprecated: false
    put:
      tags:
        - round
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'round.replaceById__put_rounds_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/round'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/round'
      deprecated: false
    delete:
      tags:
        - round
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: round.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - round
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: round.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/round'
        - name: id
          in: path
          description: round id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/round'
      deprecated: false
  '/rounds/{id}/replace':
    post:
      tags:
        - round
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'round.replaceById__post_rounds_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/round'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/round'
      deprecated: false
  /rounds/findOne:
    get:
      tags:
        - round
      summary: Find first instance of the model matched by filter from the data source.
      operationId: round.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/round'
      deprecated: false
  /rounds/update:
    post:
      tags:
        - round
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: round.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/round'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /rounds/count:
    get:
      tags:
        - round
      summary: Count instances of the model matched by where from the data source.
      operationId: round.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false


definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        $ref: '#/definitions/ObjectID'
    required:
      - id
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - email
    additionalProperties: false
  recommendation:
    properties:
      type:
        type: array
        items:
          type: string
      vote:
        type: number
        format: double
      id:
        $ref: '#/definitions/ObjectID'
      playerId:
        $ref: '#/definitions/ObjectID'
      roundId:
        $ref: '#/definitions/ObjectID'
    required:
      - type
      - vote
    additionalProperties: false
  player:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - first_name
    additionalProperties: false
  round:
    properties:
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  ObjectID:
    type: string
    pattern: "^[a-fA-F\\d]{24}$"

